package waterworld.mixin;

import net.minecraft.block.BlockState;
import net.minecraft.block.Blocks;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.ChunkRegion;
import net.minecraft.world.gen.StructureAccessor;
import net.minecraft.world.gen.chunk.NoiseChunkGenerator;
import net.minecraft.world.gen.noise.NoiseConfig;
import net.minecraft.world.chunk.Chunk;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
import waterworld.ProjectWaterworld;
import waterworld.WorldConfig;

@Mixin(NoiseChunkGenerator.class)
public class NoiseChunkGeneratorMixin {
    
    /**
     * Target the buildSurface method which creates the final terrain surface
     * Using the correct parameter order from the error message
     */
    @Inject(
        method = "buildSurface", 
        at = @At("RETURN")
    )
    private void ensureWaterworld(ChunkRegion region, StructureAccessor structureAccessor, 
                                 NoiseConfig noiseConfig, Chunk chunk, CallbackInfo ci) {
        // Get sea level
        int seaLevel = 63;
        
        // Log when we process a chunk surface
        if (WorldConfig.DEBUG_LOGGING) {
            ProjectWaterworld.LOGGER.info("Processing chunk surface for waterworld");
        }
        
        // Use BlockPos.Mutable for efficiency
        BlockPos.Mutable pos = new BlockPos.Mutable();
        
        // Get chunk coordinates
        int chunkX = chunk.getPos().getStartX();
        int chunkZ = chunk.getPos().getStartZ();
        
        // Replace all blocks above sea level with water
        for (int x = 0; x < 16; x++) {
            for (int z = 0; z < 16; z++) {
                // Calculate absolute position
                int worldX = chunkX + x;
                int worldZ = chunkZ + z;
                
                // Start at sea level and go up
                for (int y = seaLevel + 1; y < 320; y++) {
                    pos.set(worldX, y, worldZ);
                    
                    // Using region instead of chunk for block state operations
                    BlockState state = region.getBlockState(pos);
                    
                    // If it's not air and not water, replace with water
                    if (!state.isAir() && state.getBlock() != Blocks.WATER) {
                        // Use the region to set the block state
                        region.setBlockState(pos, Blocks.WATER.getDefaultState(), 3);
                        
                        if (WorldConfig.DEBUG_LOGGING && y > 80 && y % 20 == 0) {
                            ProjectWaterworld.LOGGER.info("Replaced block at y={} with water", y);
                        }
                    }
                }
            }
        }
    }
}