package waterworld.mixin;

import net.minecraft.world.gen.chunk.ChunkGenerator;
import net.minecraft.world.HeightLimitView;
import net.minecraft.world.Heightmap;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;
import waterworld.WorldConfig;

@Mixin(ChunkGenerator.class)
public class TerrainMixin {
    
    /**
     * Modify final terrain height values while preserving relative terrain features
     * This targets the getHeight method that gets called to determine final block heights
     */
    @Inject(
        method = "getHeight(IILnet/minecraft/world/Heightmap$Type;Lnet/minecraft/world/HeightLimitView;)I",
        at = @At("RETURN"), 
        cancellable = true
    )
    private void modifyFinalTerrainHeight(int x, int z, Heightmap.Type heightmapType, 
                                       HeightLimitView heightLimitView, 
                                       CallbackInfoReturnable<Integer> cir) {
        int height = cir.getReturnValue();
        int seaLevel = 63; // Default sea level in Minecraft
        
        // Only modify terrain that would be above or near sea level
        if (height >= seaLevel - 10) {
            // Scale the height to preserve the terrain's relative shape
            // Higher terrain gets pushed down more dramatically
            int heightAboveSea = Math.max(0, height - seaLevel);
            int newDepth = WorldConfig.MIN_SHALLOW_DEPTH + 
                          (int)(heightAboveSea * WorldConfig.LAND_LOWERING_FACTOR);
            
            // Ensure the terrain is pushed below sea level
            int newHeight = seaLevel - newDepth;
            cir.setReturnValue(newHeight);
        } else if (height > seaLevel - 30) {
            // For terrain already underwater but not deep enough, push it down more
            int depthBelowSea = seaLevel - height;
            int additionalDepth = (int)(depthBelowSea * 0.5);
            cir.setReturnValue(height - additionalDepth);
        }
    }
}